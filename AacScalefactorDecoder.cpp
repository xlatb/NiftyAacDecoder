#include <stdio.h>

#include "AacBitReader.h"

#include "AacScalefactorDecoder.h"

struct AacScalefactorHuffman
{
  unsigned int count;  // Number of entries
  unsigned int maxBits;  // Bit length of longest codeword
  struct { unsigned int len; unsigned int codeword; unsigned int index; } entries[];
};

static const AacScalefactorHuffman huffmanTable =
{
  .count = 121,
  .maxBits = 19,
  .entries =
  {
    { 1, 0x0     , 0x3C},
    { 3, 0x4     , 0x3B},
    { 4, 0xA     , 0x3D},
    { 4, 0xB     , 0x3A},
    { 4, 0xC     , 0x3E},
    { 5, 0x1A    , 0x39},
    { 5, 0x1B    , 0x3F},
    { 6, 0x38    , 0x38},
    { 6, 0x39    , 0x40},
    { 6, 0x3A    , 0x37},
    { 6, 0x3B    , 0x41},
    { 7, 0x78    , 0x42},
    { 7, 0x79    , 0x36},
    { 7, 0x7A    , 0x43},
    { 8, 0xF6    , 0x35},
    { 8, 0xF7    , 0x44},
    { 8, 0xF8    , 0x34},
    { 8, 0xF9    , 0x45},
    { 8, 0xFA    , 0x33},
    { 9, 0x1F6   , 0x46},
    { 9, 0x1F7   , 0x32},
    { 9, 0x1F8   , 0x31},
    { 9, 0x1F9   , 0x47},
    {10, 0x3F4   , 0x48},
    {10, 0x3F5   , 0x30},
    {10, 0x3F6   , 0x49},
    {10, 0x3F7   , 0x2F},
    {10, 0x3F8   , 0x4A},
    {10, 0x3F9   , 0x2E},
    {11, 0x7F4   , 0x4C},
    {11, 0x7F5   , 0x4B},
    {11, 0x7F6   , 0x4D},
    {11, 0x7F7   , 0x4E},
    {11, 0x7F8   , 0x2D},
    {11, 0x7F9   , 0x2B},
    {12, 0xFF4   , 0x2C},
    {12, 0xFF5   , 0x4F},
    {12, 0xFF6   , 0x2A},
    {12, 0xFF7   , 0x29},
    {12, 0xFF8   , 0x50},
    {12, 0xFF9   , 0x28},
    {13, 0x1FF4  , 0x51},
    {13, 0x1FF5  , 0x27},
    {13, 0x1FF6  , 0x52},
    {13, 0x1FF7  , 0x26},
    {13, 0x1FF8  , 0x53},
    {14, 0x3FF2  , 0x25},
    {14, 0x3FF3  , 0x23},
    {14, 0x3FF4  , 0x55},
    {14, 0x3FF5  , 0x21},
    {14, 0x3FF6  , 0x24},
    {14, 0x3FF7  , 0x22},
    {14, 0x3FF8  , 0x54},
    {14, 0x3FF9  , 0x20},
    {15, 0x7FF4  , 0x57},
    {15, 0x7FF5  , 0x59},
    {15, 0x7FF6  , 0x1E},
    {15, 0x7FF7  , 0x1F},
    {16, 0xFFF0  , 0x56},
    {16, 0xFFF1  , 0x1D},
    {16, 0xFFF2  , 0x1A},
    {16, 0xFFF3  , 0x1B},
    {16, 0xFFF4  , 0x1C},
    {16, 0xFFF5  , 0x18},
    {16, 0xFFF6  , 0x58},
    {17, 0x1FFEE , 0x19},
    {17, 0x1FFEF , 0x16},
    {17, 0x1FFF0 , 0x17},
    {18, 0x3FFE2 , 0x5A},
    {18, 0x3FFE3 , 0x15},
    {18, 0x3FFE4 , 0x13},
    {18, 0x3FFE5 , 0x3 },
    {18, 0x3FFE6 , 0x1 },
    {18, 0x3FFE7 , 0x2 },
    {18, 0x3FFE8 , 0x0 },
    {19, 0x7FFD2 , 0x62},
    {19, 0x7FFD3 , 0x63},
    {19, 0x7FFD4 , 0x64},
    {19, 0x7FFD5 , 0x65},
    {19, 0x7FFD6 , 0x66},
    {19, 0x7FFD7 , 0x75},
    {19, 0x7FFD8 , 0x61},
    {19, 0x7FFD9 , 0x5B},
    {19, 0x7FFDA , 0x5C},
    {19, 0x7FFDB , 0x5D},
    {19, 0x7FFDC , 0x5E},
    {19, 0x7FFDD , 0x5F},
    {19, 0x7FFDE , 0x60},
    {19, 0x7FFDF , 0x68},
    {19, 0x7FFE0 , 0x6F},
    {19, 0x7FFE1 , 0x70},
    {19, 0x7FFE2 , 0x71},
    {19, 0x7FFE3 , 0x72},
    {19, 0x7FFE4 , 0x73},
    {19, 0x7FFE5 , 0x74},
    {19, 0x7FFE6 , 0x6E},
    {19, 0x7FFE7 , 0x69},
    {19, 0x7FFE8 , 0x6A},
    {19, 0x7FFE9 , 0x6B},
    {19, 0x7FFEA , 0x6C},
    {19, 0x7FFEB , 0x6D},
    {19, 0x7FFEC , 0x76},
    {19, 0x7FFED , 0x6 },
    {19, 0x7FFEE , 0x8 },
    {19, 0x7FFEF , 0x9 },
    {19, 0x7FFF0 , 0xA },
    {19, 0x7FFF1 , 0x5 },
    {19, 0x7FFF2 , 0x67},
    {19, 0x7FFF3 , 0x78},
    {19, 0x7FFF4 , 0x77},
    {19, 0x7FFF5 , 0x4 },
    {19, 0x7FFF6 , 0x7 },
    {19, 0x7FFF7 , 0xF },
    {19, 0x7FFF8 , 0x10},
    {19, 0x7FFF9 , 0x12},
    {19, 0x7FFFA , 0x14},
    {19, 0x7FFFB , 0x11},
    {19, 0x7FFFC , 0xB },
    {19, 0x7FFFD , 0xC },
    {19, 0x7FFFE , 0xE },
    {19, 0x7FFFF , 0xD },
  }
};

bool AacScalefactorDecoder::decode(int *scalefactorIndex)
{
  unsigned int codeword = m_reader->readUInt(1);
  unsigned int len = 1;
  unsigned int i = 0;

  while (true)
  {
    printf("AacScalefactorDecoder::decode(): i %d  len %d  codeword 0x%X  index %d\n", i, len, codeword, huffmanTable.entries[i].index);
    // If we've hit an entry with more bits than we have, read more bits
    if (len < huffmanTable.entries[i].len)
    {
      unsigned int readCount = huffmanTable.entries[i].len - len;
      unsigned int bits = m_reader->readUInt(readCount);
      codeword = (codeword << readCount) | bits;
      len += readCount;
    }

    // Check each entry of the current length
    while (huffmanTable.entries[i].len == len)
    {
      if (huffmanTable.entries[i].codeword == codeword)
      {
        *scalefactorIndex = huffmanTable.entries[i].index;
        return true;
      }

      i++;
      if (i >= huffmanTable.count)
        return false;  // Not found
    }
  }

  // Not reached
  abort();
}
